const _crypto=require("crypto");class Encryption{static sign(t,e,r="RSA-SHA512"){t=typeof t!=="string"?JSON.stringify(t):t;let s=null;let a=null;try{const c=_crypto.createSign(r);c.update(t);a=c.sign(e,"base64")}catch(t){console.warn(t.message||t);s=t}return{err:s,data:t,privateKey:e,signature:a,algorithm:r,verification:verification}}static verify(t,e,r,s="RSA-SHA512"){t=typeof t!=="string"?JSON.stringify(t):t;let a=null;let c=false;try{c=_crypto.verify(s,Buffer.from(t),r,Buffer.from(e,"base64"))}catch(t){console.warn(t.message||t);a=t}return{err:a,data:t,publicKey:r,signature:e,algorithm:s,verification:c}}static encrypt(t,e,r="AES-256-CTR"){let s=null;let a=null;try{const c=_crypto.randomBytes(16).toString("hex").substr(0,16);const n=_crypto.createCipheriv(r,_crypto.createHash("sha256").update(e).digest("hex").substr(0,32),c);a=Buffer.from(c).toString("base64").substr(0,24)+":"+n.update(typeof t==="object"?JSON.stringify(t):t,"utf8","base64")+n.final("base64")}catch(t){console.warn(t.message||t);s=t}return{err:s,str:t,encrypted:a}}static decrypt(t,e,r="AES-256-CTR"){let s=null;let a=null;try{const[c,n]=t.split(":");const i=_crypto.createDecipheriv(r,_crypto.createHash("sha256").update(e).digest("hex").substr(0,32),Buffer.from(c,"base64"));a=Buffer.concat([i.update(Buffer.from(n,"base64")),i.final()]).toString()}catch(t){console.warn(t.message||t);s=t}return{err:s,hash:t,decrypted:a}}}module.exports=Encryption;
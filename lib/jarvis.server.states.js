const crypto=require("crypto");module.exports={loadSettings(){this.adapter.getState("settings",(t,e)=>{if(!t&&e&&e.val){try{this.settings=JSON.parse(e.val)||{};const s=["undefined","reload","securePageType","securePagePassword","securePageGroups","secureConfigurationType","secureConfigurationPassword","secureConfigurationGroups","secureLogin"];s.forEach(t=>{if(this.settings[t]!==undefined){delete this.settings[t]}});if(this.adapter.version.startsWith("3.2.")){if(this.settings.themeDarkMode===true||this.settings.themeDarkMode===false){this.settings.themeDarkMode="auto"}}this.settings.token=this.settings.token||crypto.randomBytes(16).toString("hex");this.settings.sendUsageData=this.adapter.config.sendUsageData!==undefined?this.adapter.config.sendUsageData:true;const i=JSON.stringify(this.settings);if(e.val!==i){this.adapter.setState("settings",i,true)}this.deleteSettingsStates().then(()=>this.writeSettingsStates())}catch(t){this.adapter.log.error("Error initially writing settings to states: "+t.message)}}})},handleSettings(t,s){if(t&&t.endsWith(".settings")&&s&&s.val){try{this.settings=JSON.parse(s.val)||{};this.writeSettingsStates()}catch(t){this.adapter.log.error("Error writing settings to states: "+t.message)}}else if(t&&t.indexOf(".settings.")!==-1&&s&&s.ack!==true){try{const i=t.substr(t.lastIndexOf(".settings.")+10);this.settings[i]=s&&s.val&&s.val.toString().indexOf("{")>-1&&s.val.toString().indexOf("}")>-1?JSON.parse(s.val):s.val;this.adapter.setState("settings",JSON.stringify(this.settings),true);this.adapter.log.debug('Update settings due to updated state of "'+i+'": '+JSON.stringify(this.settings));if(this.adapter.config[i]!==undefined){this.adapter.getForeignObject("system.adapter."+this.adapter.namespace,(t,e)=>{if(t||!e||!e.native){return this.adapter.log.error("Error system.adapter."+this.adapter.namespace+" not found!")}e.native[i]=s.val;this.adapter.setForeignObject(e._id,e)})}}catch(t){this.adapter.log.error("Error updating settings: "+t.message)}}},deleteSettingsStates(){return new Promise(i=>{this.adapter.getObjectList({startkey:this.adapter.namespace+".settings.",endkey:this.adapter.namespace+".settings.é¦™"},(t,e)=>{let s=[];if(e&&e.rows){s=e.rows.map(t=>this.adapter.delObjectAsync(t.id))}Promise.allSettled(s).then(()=>i())})})},writeSettingsStates(){this.adapter.log.debug("Write settings to states: "+JSON.stringify(this.settings));const t=[];Object.keys(this.settings).forEach(e=>{const s=typeof this.settings[e]==="object"?JSON.stringify(this.settings[e]):this.settings[e];const i={type:"state",common:{name:"Modify setting "+e,role:"config",type:typeof s,write:true,read:true},native:{}};if(e){t.push(new Promise(t=>{this.adapter.setObject("settings."+e,i,()=>{this.adapter.setState("settings."+e,s,true,()=>t())})}))}});return Promise.allSettled(t)},detectDuplicateIds(t,e){if(t==="devices"){this.detectDuplicateIdsInDevices(e)}else if(t==="layout"){this.detectDuplicateIdsInLayout(e)}else if(t==="widgets"){this.detectDuplicateIdsInWidgets(e)}},detectDuplicateIdsInWidgets(t){let e={};for(const s in t){const i=t[s];if(i.id!==s){this.adapter.log.warn("Widget with module "+i.module+" has different id vs. key ("+i.id+" vs "+s+"). This may lead to unexpected behaviour.")}else if(Object.keys(e).includes(i.id)){this.adapter.log.error("Widget with module "+i.module+" uses an id which is used by other widget(s) ("+e[i.id].join(", ")+").")}e[i.id]=e[i.id]||[];e[i.id].push(i.module)}},detectDuplicateIdsInDevices(t){let e={};for(const s in t){const i=t[s];if(i.id!==s){this.adapter.log.warn("Device "+i.name+" has different id vs. key ("+i.id+" vs "+s+"). This may lead to unexpected behaviour.")}else if(Object.keys(e).includes(i.id)){this.adapter.log.error("Device "+i.name+" uses an id which is used by other device(s) ("+e[i.id].join(", ")+").")}e[i.id]=e[i.id]||[];e[i.id].push(i.name)}},detectDuplicateIdsInLayout(t){let e={};let i={};let a={};let r={};t.forEach(t=>{if(Object.keys(e).includes(t.id)){this.adapter.log.error("Page "+t.title+" uses an id which is used by other page(s) ("+e[t.id].join(", ")+").")}e[t.id]=e[t.id]||[];e[t.id].push(t.title);t.tabs=t.tabs||[];t.tabs.forEach(s=>{if(Object.keys(i).includes(s.id)){this.adapter.log.error("Tab "+s.title+" uses an id which is used by other tab(s) ("+i[s.id].join(", ")+").")}i[s.id]=i[s.id]||[];i[s.id].push(s.title);s.widgetsDesktop=s.widgetsDesktop||[];s.widgetsDesktop.forEach(t=>{if(Object.keys(a).includes(t.i)){this.adapter.log.error("Widget uses an id which is used by other widget(s) (within tabs "+a[t.i].join(", ")+").")}a[t.i]=a[t.i]||[];a[t.i].push(s.title)});s.widgetsSmartphone=s.widgetsSmartphone||[];s.widgetsSmartphone.forEach((t,e)=>{if(Object.keys(r).includes(t.i)){this.adapter.log.error("Widget uses an id which is used by other widget(s) (within tabs "+r[t.i].join(", ")+").")}r[t.i]=r[t.i]||[];r[t.i].push(s.title)})})})}};
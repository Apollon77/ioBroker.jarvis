const _crypto=require("crypto");const _uuid=require("uuid").v4;module.exports={loadSettings(){this.adapter.getState("settings",(t,e)=>{if(!t&&e&&e.val){try{this.settings=JSON.parse(e.val)||{};this.settings.token=this.settings.token||_crypto.randomBytes(16).toString("hex");this.settings.sendUsageData=this.adapter.config.sendUsageData!==undefined?this.adapter.config.sendUsageData:true;const i=JSON.stringify(this.settings);if(e.val!==i){this.adapter.setState("settings",i,true)}this.writeSettings()}catch(t){this.adapter.log.error("Error initially writing settings to states: "+t.message)}}})},handleSettings(t,i){if(t&&t.endsWith(".settings")&&i&&i.val){try{this.settings=JSON.parse(i.val)||{};this.writeSettings()}catch(t){this.adapter.log.error("Error writing settings to states: "+t.message)}}else if(t&&t.indexOf(".settings.")!==-1&&i&&i.ack!==true){try{const s=t.substr(t.lastIndexOf(".settings.")+10);this.settings[s]=i&&i.val&&i.val.toString().indexOf("{")>-1&&i.val.toString().indexOf("}")>-1?JSON.parse(i.val):i.val;this.adapter.setState("settings",JSON.stringify(this.settings),true);this.adapter.log.debug('Update settings due to updated state of "'+s+'": '+JSON.stringify(this.settings));if(this.adapter.config[s]!==undefined){this.adapter.getForeignObject("system.adapter."+this.adapter.namespace,(t,e)=>{if(t||!e||!e.native){return this.adapter.log.error("Error system.adapter."+this.adapter.namespace+" not found!")}e.native[s]=i.val;this.adapter.setForeignObject(e._id,e)})}}catch(t){this.adapter.log.error("Error updating settings: "+t.message)}}},writeSettings(){this.adapter.log.debug("Write settings to states: "+JSON.stringify(this.settings));const t=Object.keys(this.settings).map(t=>{const e=typeof this.settings[t]==="object"?JSON.stringify(this.settings[t]):this.settings[t];const i={type:"state",common:{name:"Modify setting "+t,role:"config",type:typeof e,write:true,read:true},native:{}};this.adapter.setObject("settings."+t,i,()=>{this.adapter.setState("settings."+t,e,true)})});return Promise.allSettled(t)},detectDuplicateIds(t,e){if(t==="devices"){this.detectDuplicateIdsInDevices(e)}else if(t==="layout"){this.detectDuplicateIdsInLayout(e)}else if(t==="widgets"){this.detectDuplicateIdsInWidgets(e)}},detectDuplicateIdsInWidgets(t){let e={};for(const i in t){const s=t[i];if(s.id!==i){this.adapter.log.warn("Widget with module "+s.module+" has different id vs. key ("+s.id+" vs "+i+"). This may lead to unexpected behaviour.")}else if(Object.keys(e).includes(s.id)){this.adapter.log.error("Widget with module "+s.module+" uses an id which is used by other widget(s) ("+e[s.id].join(", ")+").")}e[s.id]=e[s.id]||[];e[s.id].push(s.module)}},detectDuplicateIdsInDevices(t){let e={};for(const i in t){const s=t[i];if(s.id!==i){this.adapter.log.warn("Device "+s.name+" has different id vs. key ("+s.id+" vs "+i+"). This may lead to unexpected behaviour.")}else if(Object.keys(e).includes(s.id)){this.adapter.log.error("Device "+s.name+" uses an id which is used by other device(s) ("+e[s.id].join(", ")+").")}e[s.id]=e[s.id]||[];e[s.id].push(s.name)}},detectDuplicateIdsInLayout(t){let e={};let s={};let a={};let d={};t.forEach(t=>{if(Object.keys(e).includes(t.id)){this.adapter.log.error("Page "+t.title+" uses an id which is used by other page(s) ("+e[t.id].join(", ")+").")}e[t.id]=e[t.id]||[];e[t.id].push(t.title);t.tabs=t.tabs||[];t.tabs.forEach(i=>{if(Object.keys(s).includes(i.id)){this.adapter.log.error("Tab "+i.title+" uses an id which is used by other tab(s) ("+s[i.id].join(", ")+").")}s[i.id]=s[i.id]||[];s[i.id].push(i.title);i.widgetsDesktop=i.widgetsDesktop||[];i.widgetsDesktop.forEach(t=>{if(Object.keys(a).includes(t.i)){this.adapter.log.error("Widget uses an id which is used by other widget(s) (within tabs "+a[t.i].join(", ")+").")}a[t.i]=a[t.i]||[];a[t.i].push(i.title)});i.widgetsSmartphone=i.widgetsSmartphone||[];i.widgetsSmartphone.forEach((t,e)=>{if(Object.keys(d).includes(t.i)){this.adapter.log.error("Widget uses an id which is used by other widget(s) (within tabs "+d[t.i].join(", ")+").")}d[t.i]=d[t.i]||[];d[t.i].push(i.title)})})})}};
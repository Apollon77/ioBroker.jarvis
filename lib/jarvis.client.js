const _rfdc=require("rfdc/default");const _platform=require("platform");const _uuid=require("uuid").v5;const EventEmitter=require("events");const{BindToClass}=require("./helpers");class JarvisClient extends EventEmitter{constructor(s,e){super();this.adapter=s;this.socket=e}init(s){const e=s.userAgent;const t=_platform.parse(e);const i=t.name||"";const r=s.remoteAddress.indexOf(":")!==-1?s.remoteAddress.substr(s.remoteAddress.lastIndexOf(":")+1):s.remoteAddress;const d=(r?r.replace(/\./g,"-"):"no-ip-detected")+"_"+(i?i.replace(/ /g,"-"):"no-browser-detected");const n=_uuid(d,"d03b9915-564d-491e-a0e0-7ef4af0a52d1");const c={...s,userAgent:e,userPlatform:t||{},userBrowser:i,ip:r,ns:d,id:n};BindToClass(_rfdc(c),this);this.adapter.log.info((this.remoteId?"Remote-":"")+"Client with ip "+this.ip+" (using "+this.userBrowser+") connected.");return Object.freeze(c)}message(s){this.emit("message",s)}disconnect(s=null){this.adapter.log.info((this.remoteId?"Remote-":"")+"Client with ip "+this.ip+" disconnected"+(s?": "+s:"."));for(const e in this.subscribedStates){if(this.subscribedStates[e][this.id]){delete this.subscribedStates[e][this.id]}}for(const t in this.subscribedHistory){if(this.subscribedHistory[t].clients&&this.subscribedHistory[t].clients.includes(this.id)){this.subscribedHistory[t].clients=this.subscribedHistory[t].clients.filter(s=>s.id!==this.id)}}for(const t in this.subscribedCalendar){if(this.subscribedCalendar[t].clients&&this.subscribedCalendar[t].clients.includes(this.id)){this.subscribedCalendar[t].clients=this.subscribedCalendar[t].clients.filter(s=>s.id!==this.id)}}if(this.subscribedLog&&this.subscribedLog[this.id]){delete this.subscribedLog[this.id]}this.socket&&this.socket.close();this.socket=null;this.emit("disconnected",s);return this}listen(){if(!this.remoteId){this.socket.on("close",()=>this.disconnect());this.socket.on("message",s=>this.message(s))}return this}send(s,...e){this.socket&&this.socket.send(JSON.stringify(s),...e)}}module.exports=JarvisClient;
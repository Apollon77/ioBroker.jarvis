const _uuid=require("uuid").v4;const EventEmitter=require("events");class JarvisClient extends EventEmitter{constructor(e,t,s){super();this.adapter=e;this.socket=t;this.info=s;this.messages={}}init(){this.socket.on("close",()=>this.disconnect());this.adapter.setObject("clients."+this.info.ns,{type:"device",common:{name:this.info.ip},native:{}},()=>this.updateStates());this.send("#client",this.info);this.send("#version",this.adapter.version);return this}disconnect(e=null){this.adapter.log.debug("Client with IP "+this.info.ip+" disconnected"+(e?": "+e:"."));this.updateStates(false);this.emit("disconnected",e);return this}listen(){this.socket.on("message",e=>{if(e=="ping"){this.heartbeat()}else{this.handleEvent(e)}});return this}heartbeat(){this.socket.send("pong");this.updateStates();return this}updateStates(e=true){this.info.lastSeen=Date.now();const o={connected:{name:"Indicates client connection",role:"indicator.connected",type:"boolean",value:e},ip:{name:"Client IP",role:"info.ip",type:"string",value:this.info.ip},id:{name:"Client ID",role:"text",type:"string",value:this.info.id},userAgent:{name:"Client User Agent",role:"text",type:"string",value:this.info.userAgent},userPlatform:{name:"Client Platform Information",role:"text",type:"json",value:this.info.userPlatform},userBrowser:{name:"Client Browser",role:"text",type:"string",value:this.info.userBrowser},lastSeen:{name:"Client Last Seen",role:"value.time",type:"number",value:this.info.lastSeen}};Object.keys(o).forEach(e=>{const s="clients."+this.info.ns+"."+e;const{role:t,type:i,value:n,initial:a,subscribe:r}=o[e];this.adapter.setObjectNotExists(s,{type:"state",common:{role:t,type:i,write:false},native:{}},(e,t)=>{if(t&&a||n!==undefined){this.adapter.setState(s,typeof n==="object"?JSON.stringify(n,null,3):n,true)}})});const t="clients."+this.info.ns+".setTabId";this.adapter.setObjectNotExists(t,{type:"state",common:{role:"text",type:"string",write:true},native:{}},()=>{});return this}handleEvent(t){try{const e=JSON.parse(t);if(e.event==="message"){const{messageId:s,index:i,length:n,chunk:a}=e;this.messages[s]=this.messages[s]||{};this.messages[s][i]=a;if(Object.keys(this.messages[s]).length===n){const r=Object.values(this.messages[s]).join("");this.handleMessage(r);delete this.messages[s]}}}catch(e){this.adapter.log.warn("Warning listing for messages from clients: "+e.message);this.adapter.log.debug("event: "+t)}}handleMessage(i){try{const n=JSON.parse(i);let{messageId:e,command:t,params:s=[]}=n;s=Array.isArray(s)?s:[s];this.emit("command",t,this.info.id,e,s)}catch(e){this.adapter.log.warn("Warning handling message: "+e.message+" (see debug-log for details)");this.adapter.log.debug(i)}}send(s,e={},i=_uuid(),n="message"){if(e.err){e.err={name:e.err.name||e.err,message:e.err.message,stack:e.err.stack}}else if(e.err===null){e.err="_isNull"}const t=JSON.stringify(e).match(/.{1,100000}/g);const a=t.length;t.forEach((e,t)=>{this.socket.send(JSON.stringify({event:n,messageId:i,action:s,index:t,length:a,chunk:e}))})}}module.exports=JarvisClient;
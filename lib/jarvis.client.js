const _platform=require("platform");const _uuid=require("uuid").v5;const EventEmitter=require("events");const{BindToClass}=require("./helpers");class JarvisClient extends EventEmitter{constructor(e,s){super();this.adapter=e;this.socket=s}init(e){const s=e.userAgent;const t=_platform.parse(s);const i=t.name||"";const r=e.remoteAddress.indexOf(":")!==-1?e.remoteAddress.substr(e.remoteAddress.lastIndexOf(":")+1):e.remoteAddress;const o=(r?r.replace(/\./g,"-"):"no-ip-detected")+"_"+(i?i.replace(/ /g,"-"):"no-browser-detected");const n=_uuid(o,"d03b9915-564d-491e-a0e0-7ef4af0a52d1");const d={...e,userAgent:s,userPlatform:t||{},userBrowser:i,ip:r,ns:o,id:n};BindToClass(d,this);this.adapter.log.info((this.remoteId?"Remote-":"")+"Client with ip "+this.ip+" (using "+this.userBrowser+") connected.");return d}message(e){this.emit("message",e)}disconnect(e=null){this.adapter.log.info((this.remoteId?"Remote-":"")+"Client with ip "+this.ip+" disconnected"+(e?": "+e:"."));if(this.subscribedLog&&this.subscribedLog[this.id]){delete this.subscribedLog[this.id]}for(const s in this.subscribedStates){if(this.subscribedStates[s][this.id]){delete this.subscribedStates[s][this.id]}}this.socket&&this.socket.close();this.socket=null;this.emit("disconnected",e);return this}listen(){if(!this.remoteId){this.socket.on("close",()=>this.disconnect());this.socket.on("message",e=>this.message(e))}return this}send(e,...s){this.socket&&this.socket.send(JSON.stringify(e),...s)}}module.exports=JarvisClient;
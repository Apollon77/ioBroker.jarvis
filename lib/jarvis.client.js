const{BindToClass}=require("./helpers");const platform=require("platform");const rfdc=require("rfdc/default");const uuid=require("uuid").v5;const EventEmitter=require("events");class JarvisClient extends EventEmitter{constructor(s,t){super();BindToClass(rfdc(t),this);this.adapter=s;this.instances={}}static getClientInformation({userAgent:s,remoteAddress:t,...e}){const i=platform.parse(s);const n=i.name||"";const c=t.indexOf(":")!==-1?t.substr(t.lastIndexOf(":")+1):t;const r=(c?c.replace(/\./g,"-"):"no-ip-detected")+"_"+(n?n.replace(/ /g,"-"):"no-browser-detected");const a=uuid(r,"d03b9915-564d-491e-a0e0-7ef4af0a52d1");const d=null;return{...e,userAgent:s,userPlatform:i||{},userBrowser:n,userId:d,ip:c,ns:r,id:a,unreadNotifications:[]}}addInstance(t,s){this.instances[t]=s;this.adapter.log.info((this.remoteId?"Remote-":"")+"Client-Instance with ip "+this.ip+' and instance-id "'+t+'" (using '+this.userBrowser+") connected (with "+Object.keys(this.instances).length+" instances in total).");if(!this.remoteId){this.instances[t].on("close",()=>this.disconnect(t));this.instances[t].on("message",s=>this.message(t,s))}return this}message(s,t){this.emit("message",s,t)}disconnect(s,t=null){if(this.instances[s]){this.instances[s].close();delete this.instances[s]}if(Object.keys(this.instances).length===0){for(const e in this.subscribedStates){if(this.subscribedStates[e][this.id]){delete this.subscribedStates[e][this.id]}}for(const i in this.subscribedHistory){if(this.subscribedHistory[i].clients&&this.subscribedHistory[i].clients.includes(this.id)){this.subscribedHistory[i].clients=this.subscribedHistory[i].clients.filter(s=>s.id!==this.id)}}for(const i in this.subscribedCalendar){if(this.subscribedCalendar[i].clients&&this.subscribedCalendar[i].clients.includes(this.id)){this.subscribedCalendar[i].clients=this.subscribedCalendar[i].clients.filter(s=>s.id!==this.id)}}if(this.subscribedLog&&this.subscribedLog[this.id]){delete this.subscribedLog[this.id]}this.emit("disconnected",t)}this.adapter.log.info((this.remoteId?"Remote-":"")+"Client-Instance with ip "+this.ip+' and instance-id "'+s+'" disconnected (with '+Object.keys(this.instances).length+" instances left in total)"+(t?": "+t:"."));return this}send(e,t,...i){let s=null;try{s=JSON.parse(e.chunk).stateId}catch(s){}try{this.adapter.log.debug("Send message to "+JSON.stringify(t)+" with params "+JSON.stringify(i)+": "+e.action+(s?' "'+s+'"':"")+".");if(t.instanceId){const n=this.instances[t.instanceId];n&&n.send(JSON.stringify(e),...i)}else{Object.keys(this.instances).forEach(s=>{const t=this.instances[s];t&&t.send(JSON.stringify(e),...i)})}}catch(s){this.adapter.log.warn("Error sending message to client with ip "+this.ip+" ("+(t.instanceId?'for instance "'+t.instanceId+'"':"for all instances")+', action "'+e.action+'"): '+s.message)}}}module.exports=JarvisClient;
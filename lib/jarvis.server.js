const _schedule=require("node-schedule");const _uuid=require("uuid").v4;const EventEmitter=require("events");const{BindToClass}=require("./helpers");const JarvisServerAdapters=require("./jarvis.server.adapters");const JarvisServerCalendars=require("./jarvis.server.calendars");const JarvisServerClient=require("./jarvis.server.client");const JarvisServerCloud=require("./jarvis.server.cloud");const JarvisServerGetter=require("./jarvis.server.getter");const JarvisServerHistory=require("./jarvis.server.history");const JarvisServerInstance=require("./jarvis.server.instance");const JarvisServerSetter=require("./jarvis.server.setter");class JarvisServer extends EventEmitter{constructor(e,s={}){super();this.adapter=e;this.options=s;this.clients={};this.clientsMessages={};this.subscribedStates={};this.subscribedHistory={};this.subscribedCalendar={};this.subscribedLog={};this.cache={};if(this.options.user&&this.options.user.indexOf("system.user.")===-1){this.options.user="system.user."+this.options.user}this.options.port=s.port||8400;this.options.certificates=s.certificates||null;BindToClass(JarvisServerAdapters,this);BindToClass(JarvisServerCalendars,this);BindToClass(JarvisServerClient,this);BindToClass(JarvisServerCloud,this);BindToClass(JarvisServerGetter,this);BindToClass(JarvisServerHistory,this);BindToClass(JarvisServerInstance,this);BindToClass(JarvisServerSetter,this)}init(){this.getAdapterUpdates().then(()=>this.getAdapterInstances()).then(()=>this.getHistoryInstances()).catch(e=>e&&this.adapter.log.warn(e.message));this.getScriptStatuses().catch(e=>this.adapter.log.warn(e.message));this.getCloudDevices().catch(e=>this.adapter.log.warn(e.message));return this}close(){this.scheduler.cancel()}listen(){const s={};this.on("message",(e,s)=>{const{command:t,messageId:r,params:a}=this.handleClientMessage(s);this.handleClientCommand(e,t,r,a)});let t=[];this.adapter.requireLog(true);this.adapter.on("log",e=>{t.unshift(e)});setInterval(()=>{t.length>0&&this.broadcast("Log",{logs:t},this.subscribedLog);t=[]},1e3);this.adapter.subscribeForeignStates("*");this.adapter.on("stateChange",(e,t)=>{if((e.startsWith("system.adapter.")&&e.endsWith(".alive")||e.endsWith(".info.connection"))&&(t&&t.ts===t.lc)){s.refreshAdapterInstances&&clearTimeout(s.refreshAdapterInstances);s.refreshAdapterInstances=setTimeout(()=>{this.getAdapterUpdates().then(()=>this.getAdapterInstances())},1e3)}if(e&&this.subscribedStates[e]){t=t?{stateId:e,state:{...t,stateId:e,id:e}}:{err:new Error("State with ID "+e+" is not a valid state ["+JSON.stringify(t)+"] (in handleStateChange)")};this.broadcast("stateChange",t,this.subscribedStates[e])}if(e&&e.startsWith("javascript.0.scriptEnabled.")&&t&&t.ack===true){s.refreshScripts&&clearTimeout(s.refreshScripts);s.refreshScripts=setTimeout(()=>this.getScriptStatuses(),1e3)}else if(e==="admin.0.info.updatesJson"&&t){try{this.cache.AdapterUpdates={ts:Date.now(),data:JSON.parse(t.val)};this.broadcast("AdapterUpdates",this.cache.AdapterUpdates.data)}catch(e){delete this.cache.AdapterUpdates}}if(e&&e.endsWith(".setTabId")&&t&&t.val&&t.ack!==true){this.adapter.getState(e.replace(".setTabId","")+".id",(e,s)=>{this.send(s.val,"#setTabId",t.val)})}});this.adapter.subscribeForeignObjects("*");this.adapter.on("objectChange",(s,e)=>{if(e&&e.common&&e&&e.common.smartName&&!this.cache.CloudDevices.data.includes(s)){this.cache.CloudDevices.ts=Date.now();this.cache.CloudDevices.data.push(s);this.broadcast("CloudDevices",this.cache.CloudDevices.data)}else if(e&&e.common&&!e.common.smartName&&this.cache.CloudDevices&&this.cache.CloudDevices.data.includes(s)){this.cache.CloudDevices.ts=Date.now();this.cache.CloudDevices.data=this.cache.CloudDevices.data.filter(e=>e!==s);this.broadcast("CloudDevices",this.cache.CloudDevices.data)}});return this}}module.exports=JarvisServer;
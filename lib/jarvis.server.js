const{getDayOfYear:_getDayOfYear}=require("date-fns");const _schedule=require("node-schedule");const _uuid=require("uuid").v4;const EventEmitter=require("events");const{BindToClass}=require("./helpers");const JarvisServerAdapters=require("./jarvis.server.adapters");const JarvisServerCalendars=require("./jarvis.server.calendars");const JarvisServerClient=require("./jarvis.server.client");const JarvisServerCloud=require("./jarvis.server.cloud");const JarvisServerGetter=require("./jarvis.server.getter");const JarvisServerHistory=require("./jarvis.server.history");const JarvisServerInstance=require("./jarvis.server.instance");const JarvisServerSetter=require("./jarvis.server.setter");class JarvisServer extends EventEmitter{constructor(e,s={}){super();this.adapter=e;this.options=s;this.clients={};this.clientsMessages={};this.subscribedStates={};this.subscribedHistory={};this.subscribedCalendar={};this.subscribedLog={};this.cache={};if(this.options.user&&this.options.user.indexOf("system.user.")===-1){this.options.user="system.user."+this.options.user}this.options.port=s.port||8400;this.options.certificates=s.certificates||null;BindToClass(JarvisServerAdapters,this);BindToClass(JarvisServerCalendars,this);BindToClass(JarvisServerClient,this);BindToClass(JarvisServerCloud,this);BindToClass(JarvisServerGetter,this);BindToClass(JarvisServerHistory,this);BindToClass(JarvisServerInstance,this);BindToClass(JarvisServerSetter,this)}init(){this.getAdapterUpdates().then(()=>this.getAdapterInstances()).then(()=>this.getHistoryInstances()).catch(e=>e&&this.adapter.log.warn(e.message));this.getScriptStatuses().catch(e=>this.adapter.log.warn(e.message));this.getCloudDevices().catch(e=>this.adapter.log.warn(e.message));return this}close(){this.scheduler.cancel()}listen(){const s={};this.on("message",(e,s)=>{const{command:t,messageId:i,params:r}=this.handleClientMessage(s);this.handleClientCommand(e,t,i,r)});let t=[];this.adapter.requireLog(true);this.adapter.on("log",e=>{t.unshift(e)});setInterval(()=>{t.length>0&&this.broadcast("Log",{logs:t},this.subscribedLog);t=[]},1e3);this.adapter.subscribeForeignStates("*");this.adapter.on("stateChange",(e,t)=>{if((e.startsWith("system.adapter.")&&e.endsWith(".alive")||e.endsWith(".info.connection"))&&(t&&t.ts===t.lc)){s.refreshAdapterInstances&&clearTimeout(s.refreshAdapterInstances);s.refreshAdapterInstances=setTimeout(()=>{this.getAdapterUpdates().then(()=>this.getAdapterInstances())},1e3)}if(e&&this.subscribedStates[e]){t=t?{stateId:e,state:{...t,stateId:e,id:e}}:{err:new Error("State with ID "+e+" is not a valid state ["+JSON.stringify(t)+"] (in handleStateChange)")};this.broadcast("stateChange",t,this.subscribedStates[e])}if(e&&e.startsWith("javascript.0.scriptEnabled.")&&t&&t.ack===true){s.refreshScripts&&clearTimeout(s.refreshScripts);s.refreshScripts=setTimeout(()=>this.getScriptStatuses(),1e3)}else if(e==="admin.0.info.updatesJson"&&t){try{this.cache.AdapterUpdates={ts:Date.now(),data:JSON.parse(t.val)};this.broadcast("AdapterUpdates",this.cache.AdapterUpdates.data)}catch(e){delete this.cache.AdapterUpdates}}if(e&&e.endsWith(".setTabId")&&t&&t.val&&t.ack!==true){this.adapter.getState(e.replace(".setTabId","")+".id",(e,s)=>{this.send(s.val,"#setTabId",t.val)})}});this.adapter.subscribeForeignObjects("*");this.adapter.on("objectChange",(s,t)=>{if(t&&t.common&&t&&t.common.smartName&&!this.cache.CloudDevices.data.includes(s)){this.cache.CloudDevices.ts=Date.now();this.cache.CloudDevices.data.push(s);this.broadcast("CloudDevices",this.cache.CloudDevices.data)}else if(t&&t.common&&!t.common.smartName&&this.cache.CloudDevices&&this.cache.CloudDevices.data.includes(s)){this.cache.CloudDevices.ts=Date.now();this.cache.CloudDevices.data=this.cache.CloudDevices.data.filter(e=>e!==s);this.broadcast("CloudDevices",this.cache.CloudDevices.data)}const e=t&&t.common&&t.common.custom?Object.keys(t.common.custom):[];if(e.some(e=>this.isHistoryAdapter(e))){this.cache.HistoryDevices.data[s]={};this.cache.HistoryDevices.ts=Date.now();e.forEach(e=>{if(this.isHistoryAdapter(e)){this.cache.HistoryDevices.data[s][e]=t.common.custom[e]}});this.broadcast("HistoryDevices",this.cache.HistoryDevices.data)}else if(e.every(e=>!this.isHistoryAdapter(e))&&this.cache.HistoryDevices&&this.cache.HistoryDevices.data[s]!==undefined){this.cache.HistoryDevices.ts=Date.now();this.cache.HistoryDevices.data[s]={};this.broadcast("HistoryDevices",this.cache.HistoryDevices.data)}});this.scheduler=_schedule.scheduleJob("*/1 * * * *",s=>{this.broadcast("#time",Date.now());for(const t in this.subscribedCalendar){const{calendar:e,options:i}=this.subscribedCalendar[t];const r=i.refresh||5;if(!this.subscribedCalendar[t].clients||this.subscribedCalendar[t].clients.length===0){this.adapter.log.debug('Calendar Subscription with key "'+t+'" deleted, because no more clients subscribed.');delete this.subscribedCalendar[t];continue}if(s.getMinutes()%5===0){this.adapter.log.debug('Refresh Calendar with key "'+t+'"...');const a=e=>this.broadcast("Calendar",e,this.subscribedCalendar[t].clients);this.getCalendar({cb:a},t,e,i)}}for(const t in this.subscribedHistory){const{stateId:c,options:i}=this.subscribedHistory[t];if(!this.subscribedHistory[t].clients||this.subscribedHistory[t].clients.length===0){this.adapter.log.debug('History Subscription of state "'+c+'" deleted, because no more clients subscribed (using options '+JSON.stringify(i)+").");delete this.subscribedHistory[t];continue}let e=false;if(i.timeRefresh){const o=Math.floor(i.timeRefresh/(24*60));const n=Math.floor(i.timeRefresh%(24*60)/60);const h=i.timeRefresh%60;e=(o===0||o&&_getDayOfYear(s)%o===0)&&(n===0||n&&s.getHours()%n===0)&&(h===0||h&&s.getMinutes()%h===0)}else if(i.timeType==="review"&&(i.timeReviewUnit==="seconds"||i.timeReviewUnit==="minutes")){e=true}else if(i.timeType==="review"&&i.timeReviewUnit==="hours"){e=s.getMinutes()%15===0}else if(i.timeType==="review"&&i.timeReviewUnit==="days"){e=s.getHours()%6===0&&s.getMinutes()===0}else if(i.timeType==="review"&&i.timeReviewUnit==="weeks"){e=s.getHours()===0&&s.getMinutes()===0}else if(i.timeType==="review"&&i.timeReviewUnit==="months"){e=s.getDay()===0&&s.getHours()===0&&s.getMinutes()===0}if(e){this.adapter.log.debug('Refresh History of state "'+c+'"...');const a=e=>this.broadcast("History",e,this.subscribedHistory[t].clients);this.getHistory({cb:a},t,c,i)}}});return this}}module.exports=JarvisServer;
const EventEmitter=require("events");const WebSocket=require("ws");class JarvisProxy extends EventEmitter{constructor(e){super();this.adapter=e;this.clients={}}init(t="wss://io-jarvis.ddns.net:8764",s=0){this.adapter.log.debug((s?"Reconnecting":"Connecting")+" to proxy "+t+(s?" (attempt #"+s+")":"")+"...");this.socket=new WebSocket(t,{rejectUnauthorized:false});this.socket.on("error",e=>this.adapter.log.warn(e));this.socket.on("close",e=>{this.adapter.log.debug("Lost connection to proxy "+t+"...");setTimeout(()=>{s++;this.init(t,s)},30*1e3)});this.socket.on("open",()=>{this.adapter.log.debug("Connected to proxy "+t+".");this.socket.send(JSON.stringify({event:"authenticate",payload:{role:"server",serverId:"iobrokerid",hash:"!"}}))});this.socket.on("message",e=>{try{const t=JSON.parse(e);const s=t.payload;if(t.event==="client-connect"){const i={send:(...e)=>this.send(...e),close:()=>this.close()};this.emit("connection",i,s)}else if(t.event==="client-disconnect"){const n=this.getClientId(s.remoteId);if(n&&this.clients[n]){delete this.clients[n];this.emit("close",n)}}else if(t.event==="message"){const n=this.getClientId(s.remoteId);if(n&&this.clients[n]){this.emit("message",n,s.data)}}}catch(e){}});return this}getClientId(e){const t=Object.values(this.clients).indexOf(e);return Object.keys(this.clients)[t]}mapClient(e,t){this.clients[t]=e}send(e,t,s="message"){this.socket.send(JSON.stringify({event:s,payload:{remoteId:this.clients[t],data:e}}))}close(){}}module.exports=JarvisProxy;
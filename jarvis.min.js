"use strict";const adapterName=require("./io-package.json").common.name;const utils=require("@iobroker/adapter-core");const Library=require("./lib/library.js");const JarvisConverter=require("./lib/jarvis.converter.js");const JarvisServer=require("./lib/jarvis.server.js");let adapter;let library;let jarvis;let SETTINGS={};if(!Promise.allSettled){Promise.allSettled=e=>Promise.all(e.map((e,a)=>e.then(e=>({status:"fulfilled",value:e})).catch(e=>({status:"rejected",reason:e}))))}function startAdapter(e){e=e||{};adapter=new utils.Adapter({...e,systemConfig:true,name:adapterName});adapter.on("ready",function(){library=new Library(adapter);const e=[];const a=new JarvisConverter(adapter);e.push(a.run());const n=8400+adapter.instance;e.push(new Promise(i=>{adapter.getForeignObject("system.adapter.web.0",(e,a)=>{adapter.log.debug("Web Configuration: "+JSON.stringify(a.native));const t={...a.native,user:a&&a.native&&a.native.defaultUser||null,webPort:a&&a.native&&a.native.port||8082,socketSecure:a&&a.native&&a.native.secure!==undefined?a.native.secure:false};const r={certPublic:a&&a.native&&a.native.certPublic!==undefined?a.native.certPublic:"",certPrivate:a&&a.native&&a.native.certPrivate!==undefined?a.native.certPrivate:"",certChained:a&&a.native&&a.native.certChained!==undefined?a.native.certChained:""};if(adapter.config.certPublic!==r.certPublic||adapter.config.certPrivate!==r.certPrivate||adapter.config.certChained!==r.certChained||adapter.config.autoDetect===true&&(adapter.config.webPort!==t.webPort||adapter.config.socketPort!==n||adapter.config.socketSecure!==t.socketSecure)){adapter.getForeignObject("system.adapter."+adapter.namespace,(e,a)=>{if(e||!a||!a.native){return library.terminate("Error system.adapter."+adapter.namespace+" not found!")}adapter.log.debug("Remember certificates...");a.native={...a.native,...r};if(adapter.config.autoDetect===true){adapter.log.debug("Write default config to jarvis...");a.native={...a.native,...t,socketPort:n}}adapter.setForeignObject(a._id,a)})}i(t)})}));if(adapter.config.socketSecure&&adapter.config.certPublic&&adapter.config.certPrivate){e.push(new Promise(r=>{adapter.getCertificates(adapter.config.certPublic,adapter.config.certPrivate,adapter.config.certChained,(e,a,t)=>{r(a)})}))}else{e.push(Promise.resolve(null))}e.push(new Promise(t=>{adapter.getForeignObject("system.config",(e,a)=>{t(a&&a.native&&a.native.secret||null)})}));Promise.all(e).then(e=>{const a=adapter.config.autoDetect===true?n:adapter.config.socketPort||n;jarvis=new JarvisServer(adapter,{...adapter.config,...e[1],port:a,certificates:e[2],encryptionKey:e[3]});jarvis.init().loadBackups().listen().server();if(false){jarvis.proxy()}jarvis.on("CLIENT_LIST",e=>{adapter.setState("clients.connected",JSON.stringify(e,null,3),true)});library.set(Library.CONNECTION,true)}).catch(e=>{adapter.log.error("Error opening web socket: "+e.message)})});adapter.on("message",function(n){adapter.log.silly("Got message: "+JSON.stringify(n));if(library&&library.msg&&n.command==="_getHashedToken"&&n.message){}else if(library&&library.msg&&n.command==="_getProData"){adapter.log.debug("Get pro data...");adapter.getForeignObject("system.meta.uuid",(e,i)=>{adapter.getState("info.pro",(e,a)=>{const t=a.val&&JSON.parse(a.val);const r={licence:a.val,licenceSignature:t&&t.signature,adapterInstance:adapter.instance,ioBrokerId:i.native.uuid};library.msg(n.from,n.command,r,n.callback)})})}else if(library&&library.msg&&n.command==="_backups"&&n.message&&n.message.id){const e="jarvis."+adapter.instance+"."+n.message.id;library.msg(n.from,n.command,jarvis.getBackupList(e),n.callback)}else if(n.command==="_restore"&&n.message&&n.message.id&&n.message.date){const e="jarvis."+adapter.instance+"."+n.message.id;jarvis.restore(e,n.message.date)}});adapter.on("unload",function(a){try{adapter.log.info("Adapter stopped und unloaded.");library&&library.resetStates();jarvis.close();a()}catch(e){a()}});return adapter}if(module&&module.parent){module.exports=startAdapter}else{startAdapter()}
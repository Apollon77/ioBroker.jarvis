"use strict";const adapterName=require("./io-package.json").common.name;const utils=require("@iobroker/adapter-core");const _crypto=require("crypto");const Library=require("./lib/library.js");const JarvisConverter=require("./lib/jarvis.converter.js");const JarvisServer=require("./lib/jarvis.server.js");let adapter;let library;let server;let SETTINGS={};if(!Promise.allSettled){Promise.allSettled=e=>Promise.all(e.map((e,t)=>e.then(e=>({status:"fulfilled",value:e})).catch(e=>({status:"rejected",reason:e}))))}function startAdapter(e){e=e||{};adapter=new utils.Adapter({...e,systemConfig:true,name:adapterName});adapter.on("ready",function(){library=new Library(adapter);const e=[];const t=new JarvisConverter(adapter);e.push(t.run());const s=8400+adapter.instance;e.push(new Promise(i=>{adapter.getForeignObject("system.adapter.web.0",(e,t)=>{adapter.log.debug("Web Configuration: "+JSON.stringify(t.native));const a={...t.native,user:t&&t.native&&t.native.defaultUser||null,webPort:t&&t.native&&t.native.port||8082,socketSecure:t&&t.native&&t.native.secure!==undefined?t.native.secure:false};const r={certPublic:t&&t.native&&t.native.certPublic!==undefined?t.native.certPublic:"",certPrivate:t&&t.native&&t.native.certPrivate!==undefined?t.native.certPrivate:"",certChained:t&&t.native&&t.native.certChained!==undefined?t.native.certChained:""};if(adapter.config.certPublic!==r.certPublic||adapter.config.certPrivate!==r.certPrivate||adapter.config.certChained!==r.certChained||adapter.config.autoDetect===true&&(adapter.config.webPort!==a.webPort||adapter.config.socketPort!==s||adapter.config.socketSecure!==a.socketSecure)){adapter.getForeignObject("system.adapter."+adapter.namespace,(e,t)=>{if(e||!t||!t.native){return library.terminate("Error system.adapter."+adapter.namespace+" not found!")}adapter.log.debug("Remember certificates...");t.native={...t.native,...r};if(adapter.config.autoDetect===true){adapter.log.debug("Write default config to jarvis...");t.native={...t.native,...a,socketPort:s}}adapter.setForeignObject(t._id,t)})}i(a)})}));if(adapter.config.socketSecure&&adapter.config.certPublic&&adapter.config.certPrivate){e.push(new Promise(r=>{adapter.getCertificates(adapter.config.certPublic,adapter.config.certPrivate,adapter.config.certChained,(e,t,a)=>{r(t)})}))}else{e.push(Promise.resolve(null))}e.push(new Promise(a=>{adapter.getForeignObject("system.config",(e,t)=>{a(t&&t.native&&t.native.secret||null)})}));Promise.all(e).then(e=>{const t=adapter.config.autoDetect===true?s:adapter.config.socketPort||s;server=new JarvisServer(adapter,{...adapter.config,...e[1],port:t,certificates:e[2],encryptionKey:e[3]});server.init().loadBackups().listen().server();if(false){server.proxy()}server.on("CLIENT_LIST",e=>{adapter.setState("clients.connected",JSON.stringify(e,null,3),true)});library.set(Library.CONNECTION,true)}).catch(e=>{adapter.log.error("Error opening web socket: "+e.message)});adapter.getState("settings",(e,t)=>{if(!e&&t&&t.val){try{SETTINGS=JSON.parse(t.val)||{};SETTINGS.token=SETTINGS.token||_crypto.randomBytes(16).toString("hex");SETTINGS.sendUsageData=adapter.config.sendUsageData!==undefined?adapter.config.sendUsageData:true;adapter.setState("settings",JSON.stringify(SETTINGS),true);writeSettingsToStates(SETTINGS)}catch(e){adapter.log.error("Error initially writing settings to states: "+e.message)}}})});adapter.on("stateChange",function(e,a){if(e.startsWith("jarvis."+adapter.instance)===false||a===undefined||a===null||a.val===undefined||a.val===null){return}if(e.substr(-9)===".settings"){try{const t=JSON.parse(a.val)||{};SETTINGS=t;writeSettingsToStates(t)}catch(e){adapter.log.error("Error writing settings to states: "+e.message)}}if(a.ack===true){return}if(e.indexOf(".settings.")>-1){try{const r=e.substr(e.lastIndexOf(".settings.")+10);SETTINGS[r]=a&&a.val&&a.val.toString().indexOf("{")>-1&&a.val.toString().indexOf("}")>-1?JSON.parse(a.val):a.val;adapter.setState("settings",JSON.stringify(SETTINGS),true);adapter.log.debug('Update settings due to updated state of "'+r+'": '+JSON.stringify(SETTINGS));if(adapter.config[r]!==undefined){adapter.getForeignObject("system.adapter."+adapter.namespace,(e,t)=>{if(e||!t||!t.native){return library.terminate("Error system.adapter."+adapter.namespace+" not found!")}t.native[r]=a.val;adapter.setForeignObject(t._id,t)})}}catch(e){adapter.log.error("Error updating settings: "+e.message)}}});adapter.on("message",function(s){adapter.log.silly("Got message: "+JSON.stringify(s));if(library&&library.msg&&s.command==="_getHashedToken"&&s.message){}else if(library&&library.msg&&s.command==="_getProData"){adapter.log.debug("Get pro data...");adapter.getForeignObject("system.meta.uuid",(e,i)=>{adapter.getState("info.pro",(e,t)=>{const a=t.val&&JSON.parse(t.val);const r={licence:t.val,licenceSignature:a&&a.signature,adapterInstance:adapter.instance,ioBrokerId:i.native.uuid};library.msg(s.from,s.command,r,s.callback)})})}else if(library&&library.msg&&s.command==="_backups"&&s.message&&s.message.id){const e="jarvis."+adapter.instance+"."+s.message.id;library.msg(s.from,s.command,server.getBackupList(e),s.callback)}else if(s.command==="_restore"&&s.message&&s.message.id&&s.message.date){const e="jarvis."+adapter.instance+"."+s.message.id;server.restore(e,s.message.date)}});adapter.on("unload",function(t){try{adapter.log.info("Adapter stopped und unloaded.");library&&library.resetStates();server.close();t()}catch(e){t()}});return adapter}function writeSettingsToStates(t,a=null){adapter.log.debug("Write settings to states: "+JSON.stringify(t));let r=[];for(let e in t){const i=typeof t[e]==="object"?JSON.stringify(t[e]):t[e];r.push(new Promise((a,r)=>{library.set({node:"settings."+e,description:"Modify setting "+e,role:"config",type:typeof i,write:true,read:true},i,{callback:(e,t)=>e?r(e):a(t)})}))}Promise.allSettled(r).then(e=>a&&a())}if(module&&module.parent){module.exports=startAdapter}else{startAdapter()}